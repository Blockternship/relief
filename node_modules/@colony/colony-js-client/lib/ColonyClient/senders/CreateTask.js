'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _colonyJsContractClient = require('@colony/colony-js-contract-client');

var _colonyJsContractClient2 = _interopRequireDefault(_colonyJsContractClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// XXX This is a good use-case for some kind of async validation step,
// but since the underlying method functionality is due to change very soon,
// we're opting to not make big changes to the Sender behaviour, and simply
// extend the `send` method to perform this async validation.
var CreateTask = function (_ContractClient$Sende) {
  (0, _inherits3.default)(CreateTask, _ContractClient$Sende);

  function CreateTask() {
    (0, _classCallCheck3.default)(this, CreateTask);
    return (0, _possibleConstructorReturn3.default)(this, (CreateTask.__proto__ || Object.getPrototypeOf(CreateTask)).apply(this, arguments));
  }

  (0, _createClass3.default)(CreateTask, [{
    key: 'send',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(inputValues, options) {
        var _ref2, count;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!Object.hasOwnProperty.call(inputValues, 'domainId')) {
                  _context.next = 7;
                  break;
                }

                _context.next = 3;
                return this.client.getDomainCount.call();

              case 3:
                _ref2 = _context.sent;
                count = _ref2.count;

                if (!(count < inputValues.domainId)) {
                  _context.next = 7;
                  break;
                }

                throw new Error('Domain ID ' + inputValues.domainId + ' not found');

              case 7:
                return _context.abrupt('return', (0, _get3.default)(CreateTask.prototype.__proto__ || Object.getPrototypeOf(CreateTask.prototype), 'send', this).call(this, inputValues, options));

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function send(_x, _x2) {
        return _ref.apply(this, arguments);
      }

      return send;
    }()
  }]);
  return CreateTask;
}(_colonyJsContractClient2.default.Sender);
/* eslint-disable no-underscore-dangle */

exports.default = CreateTask;
//# sourceMappingURL=CreateTask.js.map