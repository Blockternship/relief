{"version":3,"sources":["../../../src/ColonyClient/senders/CreateTask.js"],"names":["CreateTask","inputValues","options","Object","hasOwnProperty","call","client","getDomainCount","count","domainId","Error","Sender"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;AAYA;AACA;AACA;AACA;IACqBA,U;;;;;;;;;;;2GAKRC,W,EAA0BC,O;;;;;;;qBAE/BC,OAAOC,cAAP,CAAsBC,IAAtB,CAA2BJ,WAA3B,EAAwC,UAAxC,C;;;;;;uBACsB,KAAKK,MAAL,CAAYC,cAAZ,CAA2BF,IAA3B,E;;;;AAAhBG,qB,SAAAA,K;;sBACJA,QAAQP,YAAYQ,Q;;;;;sBAChB,IAAIC,KAAJ,gBAAuBT,YAAYQ,QAAnC,gB;;;4KAEQR,W,EAAaC,O;;;;;;;;;;;;;;;;;;EAZK,iCAAeS,M;AAlBvD;;kBAkBqBX,U","file":"CreateTask.js","sourcesContent":["/* @flow */\n/* eslint-disable no-underscore-dangle */\n\nimport ContractClient from '@colony/colony-js-contract-client';\nimport type ColonyClient from '../index';\n\ntype InputValues = {\n  specificationHash: string,\n  domainId: number,\n};\n\ntype OutputValues = {\n  id: number,\n};\n\n// XXX This is a good use-case for some kind of async validation step,\n// but since the underlying method functionality is due to change very soon,\n// we're opting to not make big changes to the Sender behaviour, and simply\n// extend the `send` method to perform this async validation.\nexport default class CreateTask extends ContractClient.Sender<\n  InputValues,\n  OutputValues,\n  ColonyClient,\n> {\n  async send(inputValues: InputValues, options: *) {\n    // Validate that the domain exists before attempting to create a task\n    if (Object.hasOwnProperty.call(inputValues, 'domainId')) {\n      const { count } = await this.client.getDomainCount.call();\n      if (count < inputValues.domainId)\n        throw new Error(`Domain ID ${inputValues.domainId} not found`);\n    }\n    return super.send(inputValues, options);\n  }\n}\n"]}