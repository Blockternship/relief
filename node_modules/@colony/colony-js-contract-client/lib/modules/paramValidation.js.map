{"version":3,"sources":["../../src/modules/paramValidation.js"],"names":["validateValue","validateParams","defaultAssert","isBoolean","value","areParamPairsEmpty","paramPairs","Array","isArray","length","isInputEmpty","input","Object","getOwnPropertyNames","name","type","assertValid","reason","isValid","error","message","toString","Boolean","params","spec","inputValues","assign","missingParams","filter","hasOwnProperty","call","param","map","join","every","paramSpec"],"mappings":";;;;;;;;;;;QAmBgBA,a,GAAAA,a;QA2BAC,c,GAAAA,c;;AA5ChB;;;;AACA;;AACA;;;;AAGA,IAAMC,gBAAgB,+BAAW,sBAAX,CAAtB;;AAGO,IAAMC,gCAAY,SAAZA,SAAY,CAACC,KAAD;AAAA,SAAgB,OAAOA,KAAP,KAAiB,SAAjC;AAAA,CAAlB;;AAEA,IAAMC,kDAAqB,SAArBA,kBAAqB,CAACC,UAAD;AAAA,SAChCA,cAAc,IAAd,IAAuBC,MAAMC,OAAN,CAAcF,UAAd,KAA6BA,WAAWG,MAAX,KAAsB,CAD1C;AAAA,CAA3B;;AAGA,IAAMC,sCAAe,SAAfA,YAAe,CAACC,KAAD;AAAA,SAC1BA,SAAS,IAAT,IACC,sBAAcA,KAAd,KAAwBC,OAAOC,mBAAP,CAA2BF,KAA3B,EAAkCF,MAAlC,KAA6C,CAF5C;AAAA,CAArB;;AAIA,SAAST,aAAT,CACLI,KADK,QAIL;AAAA;AAAA,MAFCU,IAED;AAAA,MAFOC,IAEP;;AAAA,MADAC,WACA,uEADgCd,aAChC;;AACA,MAAIe,eAAJ;AACA,MAAIC,UAAU,KAAd;;AAEA,MAAI;AACFA,cAAU,mCAAkBd,KAAlB,EAAyBW,IAAzB,CAAV;AACD,GAFD,CAEE,OAAOI,KAAP,EAAc;AACdF,aAASE,MAAMC,OAAN,IAAiBD,MAAME,QAAN,EAA1B;AACD;;AAED,SAAOL,YACLM,QAAQJ,OAAR,CADK,kBAESJ,IAFT,oCAE4CC,IAF5C,UAGHE,gBAAcA,MAAd,SAA0B,EAHvB,EAAP;AAMD;;AAED;;;;;AAKO,SAAShB,cAAT,CACLsB,MADK,EAELC,IAFK,EAII;AAAA,MADTR,WACS,uEADuBd,aACvB;;AACT,MAAIG,mBAAmBmB,IAAnB,KAA4Bd,aAAaa,MAAb,CAAhC,EAAsD;AACpD,WAAO,IAAP;AACD;;AAEDP,cAAY,sBAAcO,MAAd,CAAZ,EAAmC,kCAAnC;;AAEA,MAAME,cAAcb,OAAOc,MAAP,CAAc,EAAd,EAAkBH,MAAlB,CAApB;;AAEA;AACA;AACA,MAAMI,gBAAgBH,KAAKI,MAAL,CACpB;AAAA,WACE,EACEhB,OAAOiB,cAAP,CAAsBC,IAAtB,CAA2BL,WAA3B,EAAwCM,MAAM,CAAN,CAAxC,KAAqDA,MAAMtB,MAAN,KAAiB,CADxE,CADF;AAAA,GADoB,CAAtB;;AAOAO,cACEW,cAAclB,MAAd,KAAyB,CAD3B,4BAE0BkB,cAAcK,GAAd,CAAkB;AAAA;AAAA,QAAElB,IAAF;;AAAA,WAAYA,IAAZ;AAAA,GAAlB,EAAoCmB,IAApC,CAAyC,IAAzC,CAF1B;;AAKA,SAAOT,KAAKU,KAAL,CAAW;AAAA,WAChBlC,cAAcyB,YAAYU,UAAU,CAAV,CAAZ,CAAd,EAAyCA,SAAzC,EAAoDnB,WAApD,CADgB;AAAA,GAAX,CAAP;AAGD","file":"paramValidation.js","sourcesContent":["/* @flow */\n\nimport isPlainObject from 'lodash.isplainobject';\nimport { makeAssert } from '@colony/colony-js-utils';\nimport { validateValueType } from './paramTypes';\nimport type { Params, Param } from '../flowtypes';\n\nconst defaultAssert = makeAssert('Parameter Validation');\ntype AssertionMethod = (assertion: boolean, reason: string) => any;\n\nexport const isBoolean = (value: any) => typeof value === 'boolean';\n\nexport const areParamPairsEmpty = (paramPairs: Params) =>\n  paramPairs == null || (Array.isArray(paramPairs) && paramPairs.length === 0);\n\nexport const isInputEmpty = (input: any) =>\n  input == null ||\n  (isPlainObject(input) && Object.getOwnPropertyNames(input).length === 0);\n\nexport function validateValue(\n  value: any,\n  [name, type]: Param,\n  assertValid?: AssertionMethod = defaultAssert,\n) {\n  let reason;\n  let isValid = false;\n\n  try {\n    isValid = validateValueType(value, type);\n  } catch (error) {\n    reason = error.message || error.toString();\n  }\n\n  return assertValid(\n    Boolean(isValid),\n    `Parameter \"${name}\" expected a value of type \"${type}\"${\n      reason ? ` (${reason})` : ''\n    }`,\n  );\n}\n\n/**\n * Given parameters (as an object with named parameters, but potentially any\n * kind of invalid input), validate each parameter against the expected type\n * for this method, throwing vaidation errors or returning true.\n */\nexport function validateParams(\n  params?: any,\n  spec: Params,\n  assertValid?: AssertionMethod = defaultAssert,\n): boolean {\n  if (areParamPairsEmpty(spec) && isInputEmpty(params)) {\n    return true;\n  }\n\n  assertValid(isPlainObject(params), 'Expected parameters as an object');\n\n  const inputValues = Object.assign({}, params);\n\n  // Either the parameter name should exist in the inputValues,\n  // or the parameter should have a default value.\n  const missingParams = spec.filter(\n    param =>\n      !(\n        Object.hasOwnProperty.call(inputValues, param[0]) || param.length === 3\n      ),\n  );\n\n  assertValid(\n    missingParams.length === 0,\n    `Missing parameters: \"${missingParams.map(([name]) => name).join(', ')}\"`,\n  );\n\n  return spec.every(paramSpec =>\n    validateValue(inputValues[paramSpec[0]], paramSpec, assertValid),\n  );\n}\n"]}