{"version":3,"sources":["../../src/classes/ContractMethod.js"],"names":["ContractMethod","inputValues","params","defaultValues","values","Object","assign","forEach","name","hasOwnProperty","call","client","functionName","input","output","assertValid","callArgs","createTransactionData","constructor","_applyDefaultValues","callResult","concat","parsedResult","reduce","acc","index","validate","length","convertInputValues"],"mappings":"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","file":"ContractMethod.js","sourcesContent":["/* @flow */\n/* eslint-disable no-underscore-dangle */\n\nimport { makeAssert } from '@colony/colony-js-utils';\n\nimport ContractClient from './ContractClient';\nimport {\n  convertInputValues,\n  convertOutputValues,\n} from '../modules/paramConversion';\nimport { validateParams } from '../modules/paramValidation';\nimport type { ContractMethodArgs, DefaultValues, Params } from '../flowtypes';\n\n/**\n * Abstract class for interacting with contract methods.\n */\nexport default class ContractMethod<\n  InputValues: { [inputValueName: string]: any },\n  OutputValues: { [outputValueName: string]: any },\n  IContractClient: ContractClient,\n> {\n  assertValid: Function;\n  client: IContractClient;\n  defaultValues: DefaultValues;\n  functionName: string;\n  input: Params;\n  name: string;\n  output: Params;\n\n  /**\n   * Given input values, method parameters and default values, iterate through\n   * the parameters and construct and object with the properties from the\n   * input values (if they are defined) or default values.\n   */\n  static _applyDefaultValues(\n    inputValues: InputValues,\n    params: Params = [],\n    defaultValues: DefaultValues = {},\n  ): InputValues {\n    // XXX it's possible to do this in a more succinct way, but adding\n    // properties in this way preserves type safety\n    const values = Object.assign({}, inputValues);\n    params.forEach(([name]) => {\n      values[name] = Object.hasOwnProperty.call(values, name)\n        ? values[name]\n        : defaultValues[name];\n    });\n    return values;\n  }\n\n  constructor({\n    client,\n    defaultValues,\n    functionName,\n    name,\n    input,\n    output,\n  }: ContractMethodArgs<IContractClient> = {}) {\n    this.name = name;\n    this.client = client;\n    this.input = input;\n    this.functionName = functionName;\n    this.assertValid = makeAssert(`Validation failed for ${name}`);\n    if (defaultValues) this.defaultValues = defaultValues;\n    if (output) this.output = output;\n  }\n\n  /**\n   * Given named input values, transform these with the expected parameters\n   * in order to get an array of arguments expected by the contract function.\n   */\n\n  /**\n   * Given arguments to call the contract method with, return\n   * transaction data as a hex string.\n   */\n  createTransactionData(callArgs: Array<any>) {\n    return this.client.createTransactionData(this.functionName, callArgs);\n  }\n\n  /**\n   * Given input values, apply default values and validate them against the\n   * expected params\n   */\n  validate(\n    inputValues: any,\n    params: Params = this.input,\n    defaultValues: DefaultValues = this.defaultValues,\n  ) {\n    const values = this.constructor._applyDefaultValues(\n      inputValues,\n      params,\n      defaultValues,\n    );\n    return validateParams(values, params, this.assertValid);\n  }\n\n  /**\n   * Given input values, map them against the expected parameters,\n   * with the appropriate conversion for each type.\n   */\n  convertInputValues(\n    inputValues: InputValues,\n    params: Params = this.input,\n  ): Array<any> {\n    return convertInputValues(inputValues, params);\n  }\n\n  /**\n   * Given the result of a contract method call, transform these with the\n   * expected output parameters in order to get named output values as the\n   * method's `OutputValues`.\n   */\n  convertOutputValues(\n    callResult: any,\n    // eslint-disable-next-line no-unused-vars\n    inputValues?: InputValues,\n  ): OutputValues {\n    const values = [].concat(callResult);\n\n    const parsedResult = this.output.reduce(\n      (acc, [name], index) => Object.assign(acc, { [name]: values[index] }),\n      {},\n    );\n\n    return convertOutputValues(parsedResult, this.output);\n  }\n\n  /**\n   * Given input values, get default values, then validate them and return\n   * parsed method args.\n   */\n  getValidatedArgs(\n    inputValues: any,\n    params: Params = this.input,\n    defaultValues: DefaultValues = this.defaultValues,\n  ) {\n    const values = this.constructor._applyDefaultValues(\n      inputValues,\n      params,\n      defaultValues,\n    );\n    this.validate(values, params);\n\n    return params && params.length\n      ? this.convertInputValues(values, params)\n      : [];\n  }\n}\n"]}